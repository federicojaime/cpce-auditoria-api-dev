{
	"info": {
		"_postman_id": "22783df9-36ee-4188-a46f-2e337fb9f1b5",
		"name": "CPCE Auditoria API - COMPLETA v1.2 + PROVEEDORES",
		"description": "Colecci√≥n COMPLETA con correcciones de base de datos para la API de Sistema de Auditor√≠as CPCE + M√≥dulo de Proveedores usando tablas alt_proveedor y alt_contacto_proveedor",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29175984"
	},
	"item": [
		{
			"name": "üîê AUTH",
			"item": [
				{
					"name": "1. Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    if (responseJson.token) {",
									"        pm.collectionVariables.set('jwt_token', responseJson.token);",
									"        console.log('Token guardado:', responseJson.token.substring(0, 20) + '...');",
									"        console.log('Usuario:', responseJson.user.nombre + ' ' + responseJson.user.apellido);",
									"        console.log('Rol:', responseJson.user.rol);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"jgarrido\",\n    \"password\": \"Jgarrido#123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get Profile",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Verify Token",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/verify",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"verify"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Change Password",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"tu_usuario\",\n    \"dni\": \"12345678\",\n    \"password_nuevo\": \"nueva_password123\",\n    \"password_nuevo_repetir\": \"nueva_password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/change-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"change-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Logout",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìä AUDITORIAS - LISTADOS",
			"item": [
				{
					"name": "1. Auditor√≠as Pendientes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('Total auditor√≠as pendientes:', responseJson.total);",
									"    console.log('P√°gina actual:', responseJson.page);",
									"    console.log('Registros en esta p√°gina:', responseJson.data.length);",
									"    if (responseJson.data.length > 0) {",
									"        const primera = responseJson.data[0];",
									"        pm.collectionVariables.set('auditoria_id', primera.id);",
									"        console.log('ID de primera auditor√≠a guardado:', primera.id);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auditorias/pendientes?page=1&limit=10&search=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"pendientes"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "N√∫mero de p√°gina"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Registros por p√°gina"
								},
								{
									"key": "search",
									"value": "",
									"description": "B√∫squeda por apellido, nombre, DNI o m√©dico"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "1. Auditor√≠as pendientes e historicos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('Total auditor√≠as pendientes:', responseJson.total);",
									"    console.log('P√°gina actual:', responseJson.page);",
									"    console.log('Registros en esta p√°gina:', responseJson.data.length);",
									"    if (responseJson.data.length > 0) {",
									"        const primera = responseJson.data[0];",
									"        pm.collectionVariables.set('auditoria_id', primera.id);",
									"        console.log('ID de primera auditor√≠a guardado:', primera.id);",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"dni\": \"16410809\",\r\n    \"fechaDesde\": \"2022-06-01\",\r\n    \"fechaHasta\": \"2025-07-31\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auditorias/historicos-pendientes",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"historicos-pendientes"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Auditor√≠as Hist√≥ricas",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('Total auditor√≠as hist√≥ricas:', responseJson.total);",
									"    console.log('P√°gina actual:', responseJson.page);",
									"    console.log('Registros en esta p√°gina:', responseJson.data.length);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auditorias/historicas?page=1&limit=10&search=",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"historicas"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "search",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Ver Auditor√≠a Hist√≥rica",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('Total auditor√≠as hist√≥ricas:', responseJson.total);",
									"    console.log('P√°gina actual:', responseJson.page);",
									"    console.log('Registros en esta p√°gina:', responseJson.data.length);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auditorias/1029264/historica",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"1029264",
								"historica"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. ü©∫ Auditor√≠as M√©dicas (Solo Rol 9)",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('Mensaje:', responseJson.message);",
									"    console.log('Auditor√≠as m√©dicas encontradas:', responseJson.data.length);",
									"} else if (pm.response.code === 403) {",
									"    console.log('Acceso denegado - Solo para m√©dicos auditores (rol 9)');",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auditorias/medicas",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"medicas"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Listado con Filtros",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dni\": \"16410809\",\n    \"fechaDesde\": \"2024-01-01\",\n    \"fechaHasta\": \"2024-12-31\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auditorias/listado",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"listado"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. ‚úÖ Historial de Paciente (CORREGIDO)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('Historial del paciente - Registros encontrados:', responseJson.data.length);",
									"    if (responseJson.data.length > 0) {",
									"        const primer = responseJson.data[0];",
									"        console.log('Paciente:', primer.pac_apnom);",
									"        console.log('DNI:', primer.dni);",
									"        console.log('Estado auditor√≠a:', primer.estado_auditoria);",
									"    }",
									"} else {",
									"    console.log('Error:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dni\": \"16410809\",\n    \"fechaDesde\": \"2022-06-01\",\n    \"fechaHasta\": \"2025-07-31\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auditorias/paciente",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"paciente"
							]
						}
					},
					"response": []
				},
				{
					"name": "6. Generar Excel por Mes",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fecha\": \"2024-12\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auditorias/excel",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"excel"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "‚öôÔ∏è AUDITORIAS - PROCESAMIENTO",
			"item": [
				{
					"name": "1. Obtener Auditor√≠a para Procesar",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"",
									"    console.log('Auditor√≠a ID:', responseJson.auditoria?.id ?? 'No disponible');",
									"",
									"    if (responseJson.paciente) {",
									"        console.log('Paciente:', `${responseJson.paciente.nombre ?? ''} ${responseJson.paciente.apellido ?? ''}`);",
									"        console.log('DNI:', responseJson.paciente.dni ?? 'No disponible');",
									"    } else {",
									"        console.log('Paciente: No disponible');",
									"    }",
									"",
									"    if (responseJson.medico) {",
									"        console.log('M√©dico:', responseJson.medico.nombre ?? 'No disponible');",
									"    } else {",
									"        console.log('M√©dico: No disponible');",
									"    }",
									"",
									"    console.log('Renglones:', responseJson.auditoria?.renglones ?? 'No disponible');",
									"    console.log('Meses:', responseJson.auditoria?.cantmeses ?? 'No disponible');",
									"    console.log('Recetas:', responseJson.recetas ? Object.keys(responseJson.recetas).length : 0);",
									"} else {",
									"    try {",
									"        console.log('Error obteniendo auditor√≠a:', pm.response.json().message);",
									"    } catch (e) {",
									"        console.log('Error obteniendo auditor√≠a y parseando el cuerpo:', e.message);",
									"    }",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auditorias/1006744?tipo=pendiente",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"1006744"
							],
							"query": [
								{
									"key": "tipo",
									"value": "pendiente"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Resumen Auditor√≠a",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"",
									"    console.log('Auditor√≠a ID:', responseJson.auditoria?.id ?? 'No disponible');",
									"",
									"    if (responseJson.paciente) {",
									"        console.log('Paciente:', `${responseJson.paciente.nombre ?? ''} ${responseJson.paciente.apellido ?? ''}`);",
									"        console.log('DNI:', responseJson.paciente.dni ?? 'No disponible');",
									"    } else {",
									"        console.log('Paciente: No disponible');",
									"    }",
									"",
									"    if (responseJson.medico) {",
									"        console.log('M√©dico:', responseJson.medico.nombre ?? 'No disponible');",
									"    } else {",
									"        console.log('M√©dico: No disponible');",
									"    }",
									"",
									"    console.log('Renglones:', responseJson.auditoria?.renglones ?? 'No disponible');",
									"    console.log('Meses:', responseJson.auditoria?.cantmeses ?? 'No disponible');",
									"    console.log('Recetas:', responseJson.recetas ? Object.keys(responseJson.recetas).length : 0);",
									"} else {",
									"    try {",
									"        console.log('Error obteniendo auditor√≠a:', pm.response.json().message);",
									"    } catch (e) {",
									"        console.log('Error obteniendo auditor√≠a y parseando el cuerpo:', e.message);",
									"    }",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/auditorias/1000795/resumen-auditoria",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"1000795",
								"resumen-auditoria"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Procesar Auditor√≠a (Aprobar/Denegar)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"",
									"    console.log('Auditor√≠a ID:', responseJson.auditoria?.id ?? 'No disponible');",
									"",
									"    if (responseJson.paciente) {",
									"        console.log('Paciente:', `${responseJson.paciente.nombre ?? ''} ${responseJson.paciente.apellido ?? ''}`);",
									"        console.log('DNI:', responseJson.paciente.dni ?? 'No disponible');",
									"    } else {",
									"        console.log('Paciente: No disponible');",
									"    }",
									"",
									"    if (responseJson.medico) {",
									"        console.log('M√©dico:', responseJson.medico.nombre ?? 'No disponible');",
									"    } else {",
									"        console.log('M√©dico: No disponible');",
									"    }",
									"",
									"    console.log('Renglones:', responseJson.auditoria?.renglones ?? 'No disponible');",
									"    console.log('Meses:', responseJson.auditoria?.cantmeses ?? 'No disponible');",
									"    console.log('Recetas:', responseJson.recetas ? Object.keys(responseJson.recetas).length : 0);",
									"} else {",
									"    try {",
									"        console.log('Error obteniendo auditor√≠a:', pm.response.json().message);",
									"    } catch (e) {",
									"        console.log('Error obteniendo auditor√≠a y parseando el cuerpo:', e.message);",
									"    }",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"chequedos\": \"123-1,124-2,125-1\",\n  \"nochequeados\": \"126-1,127-2\",\n  \"cobert1\": \"70\",\n  \"cobert2\": \"80\",\n  \"cobert3\": \"90\",\n  \"cobert4\": \"60\",\n  \"cobert2_1\": \"BIAC\",\n  \"cobert2_2\": \"CE\",\n  \"cobert2_3\": \"ONC\",\n  \"cobert2_4\": \"PM\",\n  \"nota\": \"Auditor√≠a procesada correctamente - Algunos medicamentos aprobados\",\n  \"estadoIdentidad\": 0,\n  \"enviarMedico\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/auditorias/1000795/procesar",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"1000795",
								"procesar"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Enviar a M√©dico Auditor",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('Enviado a m√©dico auditor:', responseJson.success);",
									"    console.log('Mensaje:', responseJson.message);",
									"} else {",
									"    console.log('Error enviando a m√©dico:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auditorias/1000793/enviar-medico",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"1000793",
								"enviar-medico"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generar Pdf",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('Enviado a m√©dico auditor:', responseJson.success);",
									"    console.log('Mensaje:', responseJson.message);",
									"} else {",
									"    console.log('Error enviando a m√©dico:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auditorias/896416/generar-pdf",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"896416",
								"generar-pdf"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Revertir Auditor√≠a",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('Auditor√≠a revertida:', responseJson.success);",
									"    console.log('Mensaje:', responseJson.message);",
									"} else {",
									"    console.log('Error revirtiendo auditor√≠a:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nota\": \"Revertir por error en el procesamiento\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auditorias/1000795/revertir",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"1000795",
								"revertir"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Borrar Auditor√≠a",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('Auditor√≠a borrada:', responseJson.success);",
									"    console.log('Mensaje:', responseJson.message);",
									"} else {",
									"    console.log('Error borrando auditor√≠a:', pm.response.json().message);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nota\": \"borrar por error en el procesamiento\",\n    \"rol\":\"userRole\"\n}\n\n"
						},
						"url": {
							"raw": "{{base_url}}/auditorias/1000794/borrar",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"1000794",
								"borrar"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üè• PROVEEDORES - CRUD",
			"item": [
				{
					"name": "1. Listar Proveedores",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Proveedores obtenidos de tablas alt_*');",
									"    console.log('üìä Total proveedores:', responseJson.pagination.total);",
									"    console.log('üìÑ P√°gina actual:', responseJson.pagination.page);",
									"    console.log('üìã Proveedores en esta p√°gina:', responseJson.data.length);",
									"    if (responseJson.data.length > 0) {",
									"        const primerProveedor = responseJson.data[0];",
									"        pm.collectionVariables.set('proveedor_id', primerProveedor.id_proveedor);",
									"        console.log('üîó ID del primer proveedor:', primerProveedor.id_proveedor);",
									"        console.log('üè¢ Raz√≥n social:', primerProveedor.razon_social);",
									"        console.log('üìù CUIT:', primerProveedor.cuit);",
									"        console.log('üë• Contactos:', primerProveedor.total_contactos);",
									"    }",
									"} else {",
									"    console.log('‚ùå Error obteniendo proveedores:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/proveedores?page=1&limit=10&search=&activo=true&tipo=todos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"proveedores"
							],
							"query": [
								{
									"key": "page",
									"value": "1",
									"description": "N√∫mero de p√°gina"
								},
								{
									"key": "limit",
									"value": "10",
									"description": "Registros por p√°gina"
								},
								{
									"key": "search",
									"value": "",
									"description": "B√∫squeda por raz√≥n social, CUIT, email o localidad"
								},
								{
									"key": "activo",
									"value": "true",
									"description": "Solo proveedores activos"
								},
								{
									"key": "tipo",
									"value": "todos",
									"description": "Laboratorio, Droguer√≠a, Ambos o todos"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Crear Proveedor Completo",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Proveedor creado en alt_proveedor');",
									"    console.log('üÜî ID del nuevo proveedor:', responseJson.data.id_proveedor);",
									"    pm.collectionVariables.set('proveedor_id', responseJson.data.id_proveedor);",
									"} else {",
									"    console.log('‚ùå Error creando proveedor:', pm.response.json().message);",
									"    if (pm.response.json().message && pm.response.json().message.includes('CUIT')) {",
									"        console.log('‚ö†Ô∏è El CUIT ya existe en alt_proveedor');",
									"    }",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"razon_social\": \"Laboratorio Innovaci√≥n S.A.\",\n    \"cuit\": \"30-77777777-7\",\n    \"tipo_proveedor\": \"Laboratorio\",\n    \"email_general\": \"contacto@labinnovacion.com\",\n    \"telefono_general\": \"011-1234-5678\",\n    \"direccion_calle\": \"Av. Corrientes\",\n    \"direccion_numero\": \"1234\",\n    \"barrio\": \"San Nicol√°s\",\n    \"localidad\": \"CABA\",\n    \"provincia\": \"Buenos Aires\",\n    \"contactos\": [\n        {\n            \"nombre\": \"Juan Carlos\",\n            \"apellido\": \"P√©rez\",\n            \"cargo\": \"Director Comercial\",\n            \"email\": \"jperez@labinnovacion.com\",\n            \"telefono\": \"011-1234-5679\",\n            \"principal\": true\n        },\n        {\n            \"nombre\": \"Mar√≠a Elena\",\n            \"apellido\": \"Gonz√°lez\",\n            \"cargo\": \"Gerente de Ventas\",\n            \"email\": \"mgonzalez@labinnovacion.com\",\n            \"telefono\": \"011-1234-5680\",\n            \"principal\": false\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{base_url}}/proveedores",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"proveedores"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Obtener Proveedor por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    const proveedor = responseJson.data;",
									"    console.log('‚úÖ Proveedor obtenido de alt_proveedor');",
									"    console.log('üè¢ Raz√≥n social:', proveedor.razon_social);",
									"    console.log('üìù CUIT:', proveedor.cuit);",
									"    console.log('üë• Contactos:', proveedor.contactos.length);",
									"    if (proveedor.contactos && proveedor.contactos.length > 0) {",
									"        const primerContacto = proveedor.contactos[0];",
									"        pm.collectionVariables.set('contacto_id', primerContacto.id_contacto);",
									"        console.log('üîó ID del primer contacto:', primerContacto.id_contacto);",
									"    }",
									"} else {",
									"    console.log('‚ùå Error obteniendo proveedor:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/proveedores/{{proveedor_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"proveedores",
								"{{proveedor_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Actualizar Proveedor",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Proveedor actualizado en alt_proveedor');",
									"} else {",
									"    console.log('‚ùå Error actualizando proveedor:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"razon_social\": \"Laboratorio Actualizado S.A.\",\n    \"email_general\": \"nuevo@labtest.com\",\n    \"telefono_general\": \"011-9999-8888\",\n    \"activo\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/proveedores/{{proveedor_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"proveedores",
								"{{proveedor_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "5. Desactivar Proveedor",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Proveedor desactivado en alt_proveedor');",
									"} else {",
									"    console.log('‚ùå Error desactivando proveedor:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/proveedores/{{proveedor_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"proveedores",
								"{{proveedor_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üë• CONTACTOS - CRUD",
			"item": [
				{
					"name": "1. Listar Contactos del Proveedor",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Contactos obtenidos de alt_contacto_proveedor');",
									"    console.log('üë• Contactos encontrados:', responseJson.data.length);",
									"    if (responseJson.data.length > 0) {",
									"        const primerContacto = responseJson.data[0];",
									"        pm.collectionVariables.set('contacto_id', primerContacto.id_contacto);",
									"        console.log('üîó ID del primer contacto:', primerContacto.id_contacto);",
									"        console.log('üë§ Nombre:', primerContacto.nombre + ' ' + primerContacto.apellido);",
									"        console.log('‚≠ê Principal:', primerContacto.principal);",
									"    }",
									"} else {",
									"    console.log('‚ùå Error obteniendo contactos:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/proveedores/{{proveedor_id}}/contactos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"proveedores",
								"{{proveedor_id}}",
								"contactos"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Crear Contacto",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 201) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Contacto creado en alt_contacto_proveedor');",
									"    console.log('üÜî ID del nuevo contacto:', responseJson.data.id_contacto);",
									"    pm.collectionVariables.set('contacto_id', responseJson.data.id_contacto);",
									"} else {",
									"    console.log('‚ùå Error creando contacto:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Ana\",\n    \"apellido\": \"Mart√≠nez\",\n    \"cargo\": \"Directora T√©cnica\",\n    \"email\": \"amartinez@proveedor.com\",\n    \"telefono\": \"011-5555-6666\",\n    \"principal\": false\n}"
						},
						"url": {
							"raw": "{{base_url}}/proveedores/{{proveedor_id}}/contactos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"proveedores",
								"{{proveedor_id}}",
								"contactos"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Actualizar Contacto",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Contacto actualizado en alt_contacto_proveedor');",
									"} else {",
									"    console.log('‚ùå Error actualizando contacto:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nombre\": \"Ana Mar√≠a\",\n    \"cargo\": \"Directora Comercial\",\n    \"email\": \"anamaria@proveedor.com\",\n    \"principal\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/proveedores/{{proveedor_id}}/contactos/{{contacto_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"proveedores",
								"{{proveedor_id}}",
								"contactos",
								"{{contacto_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "4. Eliminar Contacto",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Contacto eliminado de alt_contacto_proveedor');",
									"} else {",
									"    console.log('‚ùå Error eliminando contacto:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/proveedores/{{proveedor_id}}/contactos/{{contacto_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"proveedores",
								"{{proveedor_id}}",
								"contactos",
								"{{contacto_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîß PROVEEDORES - AUXILIARES",
			"item": [
				{
					"name": "1. Obtener Tipos de Proveedores",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Tipos de proveedores obtenidos');",
									"    console.log('üìã Tipos disponibles:', responseJson.data.map(t => t.value).join(', '));",
									"} else {",
									"    console.log('‚ùå Error obteniendo tipos:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/proveedores/tipos",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"proveedores",
								"tipos"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Obtener Estad√≠sticas",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ Estad√≠sticas obtenidas de tablas alt_*');",
									"    console.log('=== ESTAD√çSTICAS DE PROVEEDORES ===');",
									"    console.log('üìä Total proveedores:', responseJson.data.total_proveedores);",
									"    console.log('‚úÖ Activos:', responseJson.data.proveedores_activos);",
									"    console.log('‚ùå Inactivos:', responseJson.data.proveedores_inactivos);",
									"    console.log('üß™ Laboratorios:', responseJson.data.laboratorios);",
									"    console.log('üè™ Droguer√≠as:', responseJson.data.droguerias);",
									"    console.log('üîÑ Ambos:', responseJson.data.ambos);",
									"    console.log('üë• Total contactos:', responseJson.data.total_contactos);",
									"} else {",
									"    console.log('‚ùå Error obteniendo estad√≠sticas:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/proveedores/estadisticas",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"proveedores",
								"estadisticas"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. B√∫squeda R√°pida",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const responseJson = pm.response.json();",
									"    console.log('‚úÖ B√∫squeda ejecutada en alt_proveedor');",
									"    console.log('üîç Resultados encontrados:', responseJson.data.length);",
									"    responseJson.data.forEach(p => {",
									"        console.log('- ' + p.razon_social + ' (' + p.cuit + ')');",
									"    });",
									"} else {",
									"    console.log('‚ùå Error en b√∫squeda:', pm.response.json().message);",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/proveedores/buscar?q=laboratorio&limit=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"proveedores",
								"buscar"
							],
							"query": [
								{
									"key": "q",
									"value": "laboratorio",
									"description": "T√©rmino de b√∫squeda"
								},
								{
									"key": "limit",
									"value": "5",
									"description": "L√≠mite de resultados"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üß™ PRUEBAS ESPEC√çFICAS",
			"item": [
				{
					"name": "Test 1: B√∫squeda en Pendientes",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test('Response has data array', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('data');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"});",
									"",
									"pm.test('Response has pagination info', function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('total');",
									"    pm.expect(jsonData).to.have.property('page');",
									"    pm.expect(jsonData).to.have.property('limit');",
									"    pm.expect(jsonData).to.have.property('totalPages');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auditorias/pendientes?search=Garc√≠a&page=1&limit=5",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"pendientes"
							],
							"query": [
								{
									"key": "search",
									"value": "Garc√≠a"
								},
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 2: Historial Paciente con DNI Espec√≠fico",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200 or 400', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    pm.test('Response has corrected field names', function () {",
									"        var jsonData = pm.response.json();",
									"        if (jsonData.data && jsonData.data.length > 0) {",
									"            var firstRecord = jsonData.data[0];",
									"            pm.expect(firstRecord).to.have.property('estado_auditoria');",
									"            pm.expect(firstRecord).to.not.have.property('estado');",
									"            pm.expect(firstRecord).to.not.have.property('observacion');",
									"            console.log('‚úÖ Campos corregidos correctamente');",
									"        }",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"dni\": \"16410809\",\n    \"fechaDesde\": \"2024-01-01\",\n    \"fechaHasta\": \"2024-12-31\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auditorias/paciente",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"paciente"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 3: Validar Estructura de Auditor√≠a Completa",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"if (pm.response.code === 200) {",
									"    pm.test('Response has correct structure', function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('success');",
									"        pm.expect(jsonData).to.have.property('data');",
									"        pm.expect(jsonData.data).to.have.property('auditoria');",
									"        pm.expect(jsonData.data).to.have.property('paciente');",
									"        pm.expect(jsonData.data).to.have.property('medico');",
									"        pm.expect(jsonData.data).to.have.property('recetas');",
									"        console.log('‚úÖ Estructura de respuesta correcta');",
									"    });",
									"} else if (pm.response.code === 404) {",
									"    console.log('‚ö†Ô∏è Auditor√≠a no encontrada (normal si el ID no existe)');",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auditorias/{{auditoria_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"{{auditoria_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 4: Acceso Denegado para Auditor√≠as M√©dicas",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Response should be 200 (if role 9) or 403 (if not role 9)', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 403]);",
									"});",
									"",
									"if (pm.response.code === 403) {",
									"    pm.test('Correct error message for non-medical auditor', function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData.message).to.include('m√©dicos auditores');",
									"        console.log('‚úÖ Control de roles funcionando correctamente');",
									"    });",
									"} else if (pm.response.code === 200) {",
									"    console.log('‚úÖ Usuario con rol de m√©dico auditor - acceso permitido');",
									"}"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/auditorias/medicas",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"auditorias",
								"medicas"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 5: Crear Proveedor con CUIT Duplicado",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Debe rechazar CUIT duplicado', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 409]);",
									"});",
									"",
									"pm.test('Mensaje de error correcto', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.include('CUIT');",
									"    console.log('‚úÖ Validaci√≥n de CUIT duplicado funcionando');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"razon_social\": \"Otro Laboratorio\",\n    \"cuit\": \"30-12345678-9\",\n    \"tipo_proveedor\": \"Laboratorio\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/proveedores",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"proveedores"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test 6: Validar Formato CUIT",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Debe rechazar formato CUIT inv√°lido', function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"});",
									"",
									"pm.test('Mensaje de validaci√≥n correcto', function () {",
									"    const responseJson = pm.response.json();",
									"    pm.expect(responseJson.message).to.include('formato');",
									"    console.log('‚úÖ Validaci√≥n de formato CUIT funcionando');",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"razon_social\": \"Test Lab\",\n    \"cuit\": \"123456789\",\n    \"tipo_proveedor\": \"Laboratorio\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/proveedores",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"proveedores"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîç DEBUGGING Y LOGS",
			"item": [
				{
					"name": "Debug: Ver Variables de Colecci√≥n",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log('=== VARIABLES DE COLECCI√ìN COMPLETA ===');",
									"console.log('Base URL:', pm.collectionVariables.get('base_url'));",
									"console.log('JWT Token (primeros 50 chars):', pm.collectionVariables.get('jwt_token')?.substring(0, 50) + '...');",
									"console.log('Auditoria ID:', pm.collectionVariables.get('auditoria_id'));",
									"console.log('Proveedor ID:', pm.collectionVariables.get('proveedor_id'));",
									"console.log('Contacto ID:', pm.collectionVariables.get('contacto_id'));",
									"console.log('=== FIN VARIABLES ===');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Debug: Test de Conexi√≥n Completo",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log('=== TEST DE CONEXI√ìN COMPLETO ===');",
									"console.log('Response Code:', pm.response.code);",
									"console.log('Response Time:', pm.response.responseTime + 'ms');",
									"console.log('Response Size:', pm.response.responseSize + ' bytes');",
									"",
									"pm.test('Health check is working', function () {",
									"    pm.response.to.have.status(200);",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql('OK');",
									"});",
									"",
									"if (pm.response.code === 200) {",
									"    console.log('‚úÖ Servidor API funcionando correctamente');",
									"    console.log('‚úÖ M√≥dulos disponibles: AUTH + AUDITORIAS + PROVEEDORES');",
									"    var responseData = pm.response.json();",
									"    console.log('Timestamp servidor:', responseData.timestamp);",
									"} else {",
									"    console.log('‚ùå Problema con el servidor API');",
									"}",
									"console.log('=== FIN TEST CONEXI√ìN ===');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/health",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Debug: Verificar Tablas alt_proveedor",
					"event": [
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"console.log('=== VERIFICACI√ìN TABLAS alt_proveedor ===');",
									"",
									"if (pm.response.code === 200) {",
									"    const stats = pm.response.json().data;",
									"    console.log('‚úÖ Tablas alt_proveedor funcionando');",
									"    console.log('‚úÖ Total proveedores en alt_proveedor:', stats.total_proveedores);",
									"    console.log('‚úÖ Total contactos en alt_contacto_proveedor:', stats.total_contactos);",
									"    ",
									"    pm.test('Base de datos alt_* operativa', function () {",
									"        pm.expect(stats.total_proveedores).to.be.at.least(0);",
									"        pm.expect(stats.total_contactos).to.be.at.least(0);",
									"    });",
									"} else {",
									"    console.log('‚ùå Error accediendo a tablas alt_proveedor');",
									"    console.log('‚ùå Verificar que las tablas alt_* est√©n creadas');",
									"}",
									"console.log('=== FIN VERIFICACI√ìN TABLAS ===');"
								]
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/proveedores/estadisticas",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"proveedores",
								"estadisticas"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script que se ejecuta antes de cada request",
					"console.log('üöÄ Ejecutando request a:', pm.request.url.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script que se ejecuta despu√©s de cada response",
					"console.log('üìä Response status:', pm.response.code, pm.response.status);",
					"if (pm.response.code >= 400) {",
					"    console.log('‚ùå Error details:', pm.response.json()?.message || 'No message');",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000/api",
			"type": "string"
		},
		{
			"key": "base_url_prod",
			"value": "https://tu-dominio-api.com/api",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "auditoria_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "proveedor_id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "contacto_id",
			"value": "1",
			"type": "string"
		}
	]
}